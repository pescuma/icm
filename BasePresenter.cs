// Automatically generated by Model#
// DO NOT EDIT THIS FILE

using org.pescuma.ModelSharp.Lib;
using System.Collections.Specialized;
using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Diagnostics;

namespace org.pescuma.icm
{

	[DataContract]
	[DebuggerDisplay("Presenter[CurrentSide={CurrentSide} CurrentQuality={CurrentQuality} AvgPingTimeMs={AvgPingTimeMs} MainImage={MainImage} TrayImage={TrayImage} History={History.Count}items]")]
	public abstract class BasePresenter : INotifyPropertyChanging, INotifyChildPropertyChanging, INotifyPropertyChanged, INotifyChildPropertyChanged, ICloneable
	{
		#region Field Name Defines
		
		public class PROPERTIES
		{
			public const string CURRENT_SIDE = "CurrentSide";
			public const string CURRENT_QUALITY = "CurrentQuality";
			public const string AVG_PING_TIME_MS = "AvgPingTimeMs";
			public const string CONFIG = "Config";
			public const string MAIN_IMAGE = "MainImage";
			public const string TRAY_IMAGE = "TrayImage";
			public const string HISTORY = "History";
		}
		
		#endregion
		
		#region Constructors
		
		public BasePresenter()
		{
			_currentSide = Side.Left;
			AddCurrentSideListeners(_currentSide);
			_currentQuality = Quality.Good;
			AddCurrentQualityListeners(_currentQuality);
			_config = new Configuration();
			AddConfigListeners(_config);
			_history = new ObservableList<HistoryEntry>();
			AddHistoryListListeners(_history);
		}
		
		public BasePresenter(BasePresenter other)
		{
			_currentSide = other.CurrentSide;
			AddCurrentSideListeners(_currentSide);
			_currentQuality = other.CurrentQuality;
			AddCurrentQualityListeners(_currentQuality);
			_avgPingTimeMs = other.AvgPingTimeMs;
			_config = new Configuration(other.Config);
			AddConfigListeners(_config);
			_mainImage = other.MainImage;
			_trayImage = other.TrayImage;
			_history = new ObservableList<HistoryEntry>(other.History);
			AddHistoryListListeners(_history);
		}
		
		#endregion
		
		#region Property CurrentSide
		
		[DataMember(Name = "CurrentSide", Order = 0, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Side _currentSide;
		
		public Side CurrentSide
		{
			[DebuggerStepThrough]
			get {
				return GetCurrentSide();
			}
			[DebuggerStepThrough]
			set {
				SetCurrentSide(value);
			}
		}
		
		protected virtual Side GetCurrentSide()
		{
			return _currentSide;
		}
		
		protected virtual bool SetCurrentSide(Side currentSide)
		{
			if (_currentSide == currentSide)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.CURRENT_SIDE);
			
			RemoveCurrentSideListeners(currentSide);
			
			_currentSide = currentSide;
			
			AddCurrentSideListeners(currentSide);
			
			NotifyPropertyChanged(PROPERTIES.CURRENT_SIDE);
			
			return true;
		}
		
		private void RemoveCurrentSideListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= CurrentSidePropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= CurrentSideChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= CurrentSidePropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= CurrentSideChildPropertyChangedEventHandler;
		}
		
		private void AddCurrentSideListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += CurrentSidePropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += CurrentSideChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += CurrentSidePropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += CurrentSideChildPropertyChangedEventHandler;
		}
		
		private void CurrentSidePropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CURRENT_SIDE, sender, e);
		}
		
		private void CurrentSideChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CURRENT_SIDE, sender, e);
		}
		
		private void CurrentSidePropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CURRENT_SIDE, sender, e);
		}
		
		private void CurrentSideChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CURRENT_SIDE, sender, e);
		}
		
		#endregion Property CurrentSide
		
		#region Property CurrentQuality
		
		[DataMember(Name = "CurrentQuality", Order = 1, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Quality _currentQuality;
		
		public Quality CurrentQuality
		{
			[DebuggerStepThrough]
			get {
				return GetCurrentQuality();
			}
			[DebuggerStepThrough]
			protected set {
				SetCurrentQuality(value);
			}
		}
		
		protected virtual Quality GetCurrentQuality()
		{
			return _currentQuality;
		}
		
		protected virtual bool SetCurrentQuality(Quality currentQuality)
		{
			if (_currentQuality == currentQuality)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.CURRENT_QUALITY);
			
			RemoveCurrentQualityListeners(currentQuality);
			
			_currentQuality = currentQuality;
			
			AddCurrentQualityListeners(currentQuality);
			
			NotifyPropertyChanged(PROPERTIES.CURRENT_QUALITY);
			
			return true;
		}
		
		private void RemoveCurrentQualityListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= CurrentQualityPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= CurrentQualityChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= CurrentQualityPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= CurrentQualityChildPropertyChangedEventHandler;
		}
		
		private void AddCurrentQualityListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += CurrentQualityPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += CurrentQualityChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += CurrentQualityPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += CurrentQualityChildPropertyChangedEventHandler;
		}
		
		private void CurrentQualityPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CURRENT_QUALITY, sender, e);
		}
		
		private void CurrentQualityChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CURRENT_QUALITY, sender, e);
		}
		
		private void CurrentQualityPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CURRENT_QUALITY, sender, e);
		}
		
		private void CurrentQualityChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CURRENT_QUALITY, sender, e);
		}
		
		#endregion Property CurrentQuality
		
		#region Property AvgPingTimeMs
		
		[DataMember(Name = "AvgPingTimeMs", Order = 2, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _avgPingTimeMs;
		
		public int AvgPingTimeMs
		{
			[DebuggerStepThrough]
			get {
				return GetAvgPingTimeMs();
			}
			[DebuggerStepThrough]
			protected set {
				SetAvgPingTimeMs(value);
			}
		}
		
		protected virtual int GetAvgPingTimeMs()
		{
			return _avgPingTimeMs;
		}
		
		protected virtual bool SetAvgPingTimeMs(int avgPingTimeMs)
		{
			if (_avgPingTimeMs == avgPingTimeMs)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.AVG_PING_TIME_MS);
			
			_avgPingTimeMs = avgPingTimeMs;
			
			NotifyPropertyChanged(PROPERTIES.AVG_PING_TIME_MS);
			
			return true;
		}
		
		#endregion Property AvgPingTimeMs
		
		#region Property Config
		
		[DataMember(Name = "Config", Order = 3, IsRequired = true)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly Configuration _config;
		
		public Configuration Config
		{
			[DebuggerStepThrough]
			get {
				return GetConfig();
			}
		}
		
		protected virtual Configuration GetConfig()
		{
			return _config;
		}
		
		private void AddConfigListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += ConfigPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += ConfigChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += ConfigPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += ConfigChildPropertyChangedEventHandler;
		}
		
		private void ConfigPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CONFIG, sender, e);
		}
		
		private void ConfigChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CONFIG, sender, e);
		}
		
		private void ConfigPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CONFIG, sender, e);
		}
		
		private void ConfigChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CONFIG, sender, e);
		}
		
		#endregion Property Config
		
		#region Property MainImage
		
		[DataMember(Name = "MainImage", Order = 4, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _mainImage;
		
		public string MainImage
		{
			[DebuggerStepThrough]
			get {
				return GetMainImage();
			}
			[DebuggerStepThrough]
			protected set {
				SetMainImage(value);
			}
		}
		
		protected virtual string GetMainImage()
		{
			return _mainImage;
		}
		
		protected virtual bool SetMainImage(string mainImage)
		{
			if (_mainImage == mainImage)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.MAIN_IMAGE);
			
			_mainImage = mainImage;
			
			NotifyPropertyChanged(PROPERTIES.MAIN_IMAGE);
			
			return true;
		}
		
		#endregion Property MainImage
		
		#region Property TrayImage
		
		[DataMember(Name = "TrayImage", Order = 5, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _trayImage;
		
		public string TrayImage
		{
			[DebuggerStepThrough]
			get {
				return GetTrayImage();
			}
			[DebuggerStepThrough]
			protected set {
				SetTrayImage(value);
			}
		}
		
		protected virtual string GetTrayImage()
		{
			return _trayImage;
		}
		
		protected virtual bool SetTrayImage(string trayImage)
		{
			if (_trayImage == trayImage)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.TRAY_IMAGE);
			
			_trayImage = trayImage;
			
			NotifyPropertyChanged(PROPERTIES.TRAY_IMAGE);
			
			return true;
		}
		
		#endregion Property TrayImage
		
		#region Property History
		
		[DataMember(Name = "History", Order = 6, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<HistoryEntry> _history;
		
		public ObservableList<HistoryEntry> History
		{
			[DebuggerStepThrough]
			get {
				return GetHistory();
			}
		}
		
		protected virtual ObservableList<HistoryEntry> GetHistory()
		{
			return _history;
		}
		
		private void AddHistoryListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += HistoryListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += HistoryListPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.CollectionChanged += HistoryListChangedEventHandler;
		}
		
		private void HistoryListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<HistoryEntry>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.HISTORY);
		}
		
		private void HistoryListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<HistoryEntry>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.HISTORY);
		}
		
		private void HistoryListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
				
					if ((e.OldItems == null || e.OldItems.Count == 0)
					        && (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();
						
					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							RemoveHistoryItemListeners(item);
							
					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							AddHistoryItemListeners(item);
							
					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or
					// we can't control the items
					throw new InvalidOperationException();
			}
		}
		
		private void RemoveHistoryItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= HistoryItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= HistoryItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= HistoryItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= HistoryItemChildPropertyChangedEventHandler;
		}
		
		private void AddHistoryItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += HistoryItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += HistoryItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += HistoryItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += HistoryItemChildPropertyChangedEventHandler;
		}
		
		private void HistoryItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.HISTORY, sender, e);
		}
		
		private void HistoryItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.HISTORY, sender, e);
		}
		
		private void HistoryItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.HISTORY, sender, e);
		}
		
		private void HistoryItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.HISTORY, sender, e);
		}
		
		#endregion Property History
		
		#region Get/Set by name and CopyFrom
		
		public object GetField(string fieldName)
		{
			switch (fieldName)
			{
				case PROPERTIES.CURRENT_SIDE:
					return GetCurrentSide();
				case PROPERTIES.CURRENT_QUALITY:
					return GetCurrentQuality();
				case PROPERTIES.AVG_PING_TIME_MS:
					return GetAvgPingTimeMs();
				case PROPERTIES.CONFIG:
					return GetConfig();
				case PROPERTIES.MAIN_IMAGE:
					return GetMainImage();
				case PROPERTIES.TRAY_IMAGE:
					return GetTrayImage();
				case PROPERTIES.HISTORY:
					return GetHistory();
			}
			
			throw new ArgumentException("No gettable field named " + fieldName);
		}
		
		public void SetField(string fieldName, object value)
		{
			switch (fieldName)
			{
				case PROPERTIES.CURRENT_SIDE:
					if (!(value is Side))
						throw new ArgumentException(fieldName + " must be of type Side");
						
					SetCurrentSide((Side) value);
					
					return;
				case PROPERTIES.CURRENT_QUALITY:
					if (!(value is Quality))
						throw new ArgumentException(fieldName + " must be of type Quality");
						
					SetCurrentQuality((Quality) value);
					
					return;
				case PROPERTIES.AVG_PING_TIME_MS:
					if (!(value is int))
						throw new ArgumentException(fieldName + " must be of type int");
						
					SetAvgPingTimeMs((int) value);
					
					return;
				case PROPERTIES.MAIN_IMAGE:
					if (!(value is string))
						throw new ArgumentException(fieldName + " must be of type string");
						
					SetMainImage((string) value);
					
					return;
				case PROPERTIES.TRAY_IMAGE:
					if (!(value is string))
						throw new ArgumentException(fieldName + " must be of type string");
						
					SetTrayImage((string) value);
					
					return;
			}
			
			throw new ArgumentException("No settable field named " + fieldName);
		}
		
		public void CopyFrom(Presenter other)
		{
			CurrentSide = other.CurrentSide;
			CurrentQuality = other.CurrentQuality;
			AvgPingTimeMs = other.AvgPingTimeMs;
			Config.CopyFrom(other.Config);
			MainImage = other.MainImage;
			TrayImage = other.TrayImage;
			History.Clear();
			History.AddRange(other.History);
		}
		
		#endregion
		
		#region Property Notification
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event ChildPropertyChangingEventHandler ChildPropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event ChildPropertyChangedEventHandler ChildPropertyChanged;
		
		protected void NotifyPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanging(string propertyName, object sender, PropertyChangingEventArgs e)
		{
			ChildPropertyChangingEventHandler handler = ChildPropertyChanging;
			if (handler != null)
				handler(sender, new ChildPropertyChangingEventArgs(this, propertyName, e));
		}
		
		protected void NotifyPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanged(string propertyName, object sender, PropertyChangedEventArgs e)
		{
			ChildPropertyChangedEventHandler handler = ChildPropertyChanged;
			if (handler != null)
				handler(sender, new ChildPropertyChangedEventArgs(this, propertyName, e));
		}
		
		#endregion
		
		#region Clone
		
		public Presenter Clone()
		{
			return (Presenter) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new Presenter((Presenter) this);
		}
		
		#endregion
	}
	
}
